                            
							---[SQL CAPSTONE-1]---
							                                                                     --PRESENTED BY, 
																					                  --J.CHARITHA.
         --CASE-1--

--CREATING DATABASE NAME AS "ASSIGNMENT"--
       CREATE DATABASE ASSIGNMENT;

--USING WITH "ASSIGNMENT"--
       USE ASSIGNMENT;

--CREATING TABLE NAME AS "CUSTOMER"--
       CREATE TABLE CUSTOMER(
	                   CUSTOMER_ID INT,
					   FIRST_NAME CHAR(10),
					   LAST_NAME CHAR(10),
					   EMAIL VARCHAR(30),
					   ADDERS VARCHAR(40),
					   CITY CHAR(15),
					   STATE CHAR(20),
					   ZIP INT
                     );

--INSERTING 5 NEW RECORDS INTO THE TABLE--
       INSERT INTO CUSTOMER VALUES
	           (1,'GEET','RAJ','GEETRAJ@GMAIL','BHILLS-29','SAN JOSE','CALIFORNIA',412565),
			   (2,'JOHN','DEERE','JOHN11@GMAIL.COM','SEMINARY ROAD','SAN JOSE','CALIFORNIA',562341),
			   (3,'ABRAM','KAHN','KHANABRAM@GMAIL.COM','MASCOW HEIGHTS-12','BANGALORE','KARNATAKA',457264),
			   (4,'GAUTAM','SANJEEV','SANJUGAUTAM12@GMAIL.COM','FALCON HILLS-35','PUNE','MAHARASTRA',444460),
			   (5,'GAIL','HARDY','GAIL39@GMAIL.COM','SKAGEN 29','MERIDA','MEXICO',445691);

--FOR TABLE VIEW--
      SELECT * FROM CUSTOMER;
	  
--TO SELECT SPECIFIC COLUMNS FROM THE TABLE--
      SELECT 
	      FIRST_NAME , LAST_NAME
	  FROM
	      CUSTOMER;

--TO SELECT SPECIFIC LETTERS FROM THE TABLE--
      SELECT 
	      FIRST_NAME FROM CUSTOMER
                     WHERE FIRST_NAME LIKE ('G%')
	                        AND CITY = 'SAN JOSE';

--------------------------------------------------------------------------------------------------------------------
					--CASE-2--		  

--CREATING ANOTEHR TABLE--
       CREATE TABLE ORDERS(
	                ORDER_ID INT,
					ORDER_DATE CHAR(10),
					AMOUNT INT,
					CUSTOMER_ID INT
                   );
				   DROP TABLE ORDERS

--INSERTING SOME NEW RECORDS TO TABLE--
      INSERT INTO ORDERS VALUES
	              (101,'01/01/2021',5000,2),
				  (102,'01/14/2021',6500,3),
				  (103,'01/27/2021',2300,4),
				  (104,'02/02/2021',5040,6),
				  (105,'02/07/2021',1570,8),
				  (106,'01/23/2021',5000,2),
				  (107,'01/11/2021',600,3),
				  (108,'02/02/2021',2300,4),
				  (109,'02/05/2021',450,4),
				  (110,'02/07/2021',1530,8);
--FOR TABLE VIEW--
       SELECT * FROM ORDERS;

--MAKE AN INNER JOIN ON "CUSTOMER" & "ORDERS" TABLES--
       
	   SELECT * FROM CUSTOMER;
	   SELECT * FROM ORDERS;
	   
	   SELECT CUSTOMER.CUSTOMER_ID,FIRST_NAME,LAST_NAME,EMAIL,ADDERS,CITY,STATE,ZIP,ORDER_ID,ORDER_DATE,AMOUNT
	   FROM CUSTOMER
	   INNER JOIN ORDERS
	   ON CUSTOMER.CUSTOMER_ID = ORDERS.CUSTOMER_ID;
 
--MAKE AN LEFT JOIN--
       SELECT CUSTOMER.CUSTOMER_ID,FIRST_NAME,LAST_NAME,EMAIL,ADDERS,CITY,STATE,ZIP,ORDER_ID,ORDER_DATE,AMOUNT
	   FROM CUSTOMER
	   LEFT JOIN ORDERS
	   ON CUSTOMER.CUSTOMER_ID = ORDERS.CUSTOMER_ID;

--MAKE AN RIGHT JOIN--
       SELECT CUSTOMER.CUSTOMER_ID,FIRST_NAME,LAST_NAME,EMAIL,ADDERS,CITY,STATE,ZIP,ORDER_ID,ORDER_DATE,AMOUNT
	   FROM CUSTOMER
	   RIGHT JOIN ORDERS
	   ON CUSTOMER.CUSTOMER_ID = ORDERS.CUSTOMER_ID;

--MAKE AN FULL JOIN--
       SELECT CUSTOMER.CUSTOMER_ID,FIRST_NAME,LAST_NAME,EMAIL,ADDERS,CITY,STATE,ZIP,ORDER_ID,ORDER_DATE,AMOUNT
	   FROM CUSTOMER
	   FULL JOIN ORDERS
	   ON CUSTOMER.CUSTOMER_ID = ORDERS.CUSTOMER_ID;

--TO UPDATE DATA--
      UPDATE ORDERS
	        SET AMOUNT = 100
		    WHERE CUSTOMER_ID = 3;

      SELECT * FROM ORDERS;

---------------------------------------------------------------------------------------------------------------------------------------------------------
                    --CASE-3--

--USING THE INBUILT FUNCTIONS TO FIND MAXIMUM,MINIMUM,AVERAGE AMOUNT--
--MAXIMUM & MINIMUM & AVERAGE ARE THE AGGRIGATE FUNCTIONS--

       SELECT MAX(AMOUNT) AS 'MAXIMUM AMOUNT'   --5040--
		  FROM ORDERS;

       SELECT MIN(AMOUNT) AS 'MINIMUM AMOUNT'    --100--
	      FROM ORDERS;

       SELECT AVG(AMOUNT) AS 'AVERAGE AMOUNT'    --2339--
	      FROM ORDERS;
	        
--CREATING USER-DEFINED FUNCTIONS--  
      CREATE FUNCTION PROD (@C1 INT, @C2 INT)
	   RETURNS INT
	   AS
	   BEGIN 
	       DECLARE @MULTIPLY INT
		     SET @C2 = 10
		     SET @MULTIPLY = @C1 * @C2
		  RETURN @MULTIPLY
      END;
      
--TO TEST THE FUNCTION--		   
        SELECT [DBO].[PROD] (12,10) AS MULTIPLE;		

--USING CASE STATEMENT--
          DECLARE @NUMBER INT 
		     SET @NUMBER = 100    
		  SELECT     
		  CASE
		     WHEN @NUMBER < 200  THEN '100 LESS THAN 200'
		                   
             WHEN @NUMBER > 200 THEN '100 GREATER THAN 200'
		                    
             WHEN @NUMBER = 200  THEN '100 EQUAL TO 200'
		                   
         END AS 'VALUE';  
		 
-------------------------------------------------------------------------------------------------------------------------------------------
                        --CASE-4--

--ARRANGE THE DATA IN DECENDING ORDER--
          SELECT * FROM ORDERS
		    ORDER BY AMOUNT DESC;
--OR---
			SELECT AMOUNT FROM ORDERS
			  ORDER BY AMOUNT DESC;

--CREATING TABLE "EMPLOYEE_DETAILES1"--
           CREATE TABLE EMPLOYEE_DETAILES1(
		                   EMP_ID INT,
						   EMP_NAME VARCHAR(30),
						   EMP_SALARY INT
                          );

 --INSERTING NEW RECORDS INTO THE TABLE--
           INSERT INTO EMPLOYEE_DETAILES1 VALUES
		                       (101,'JOSEPH TRIBBIANI',25000),
							   (102,'MONICA GELLAR',30000),
							   (103,'CHANDREL BING',50000),
							   (104,'GUNTHER',15000),
							   (105,'RACHEL GREEN',30000);

--CREATING ANOTHER TABLE "EMPLOYEE_DETAILS2"--
          CREATE TABLE EMPLOYEE_DETAILES2(
		                  EMP_ID INT,
						  EMP_NAME VARCHAR(30),
						  EMP_SALRY INT
						 );  

--INSERTING NEW RECORDS INTO THE TABLE--
          INSERT INTO EMPLOYEE_DETAILES2 VALUES 
		                      (101,'JOSEPH TRIBBIANI',25000),
							  (102,'PHOEBE BUFFAY',30000),
							  (103,'CHANDLER BING',50000),
							  (104,'ROSS GALLER',70000),
							  (105,'RACHEL GREEN',30000);

--APPLYING UNION OPERATORS FOR BOTH TABLES--

--IT IS IN COMPLEX--
          SELECT EMPLOYEE_DETAILES1.EMP_ID,EMPLOYEE_DETAILES1.EMP_NAME,EMPLOYEE_DETAILES1.EMP_SALARY, EMPLOYEE_DETAILES2.EMP_NAME,EMPLOYEE_DETAILES2.EMP_SALRY
		  FROM EMPLOYEE_DETAILES1
		       LEFT JOIN EMPLOYEE_DETAILES2
		  ON EMPLOYEE_DETAILES1.EMP_ID=EMPLOYEE_DETAILES2.EMP_ID
		  UNION
		  SELECT EMPLOYEE_DETAILES1.EMP_ID,EMPLOYEE_DETAILES1.EMP_NAME,EMPLOYEE_DETAILES1.EMP_SALARY, EMPLOYEE_DETAILES2.EMP_NAME,EMPLOYEE_DETAILES2.EMP_SALRY
		  FROM EMPLOYEE_DETAILES1
		       RIGHT JOIN EMPLOYEE_DETAILES2
		  ON EMPLOYEE_DETAILES1.EMP_ID=EMPLOYEE_DETAILES2.EMP_ID;
		  
SELECT * FROM EMPLOYEE_DETAILES1;
SELECT * FROM EMPLOYEE_DETAILES2;

--APPLYING UNION OPERATOR IN SIMPLE WAY--
            SELECT * FROM EMPLOYEE_DETAILES1
	     UNION                                     --WHICH GIVES WHOLE RECORDS FROM THE TABLE--
	        SELECT * FROM EMPLOYEE_DETAILES2;

--APPLYING INTERSECT OPERATOR--
            SELECT * FROM EMPLOYEE_DETAILES1
         INTERSECT                                 --WHICH GIVES COMMON RECORDS FROM THE TABLE--
	        SELECT * FROM EMPLOYEE_DETAILES2;

--APPLYING EXCEPT OPERATOR--
             SELECT * FROM EMPLOYEE_DETAILES1
         EXCEPT                                    --WHICH GIVES THE REMAINING WHICH ARE NOT COMMON FROM BOTH TABLES--
	         SELECT * FROM EMPLOYEE_DETAILES2;
          
--------------------------------------------------------------------------------------------------------------------------------------
                      --CASE-5--

--CREATING VIEWS--
            CREATE VIEW CUSTOMER_SAN_JOSE 
		    AS
		    SELECT * FROM CUSTOMER
			      WHERE CITY = 'SAN JOSE'
			      WITH CHECK OPTION;

--TO VIEW THE TABLE--		  
		  SELECT * FROM CUSTOMER_SAN_JOSE;

--CREATING AND INSERTING TRANSACTION--
          BEGIN TRANSACTION
		    BEGIN
		       SAVE TRANSACTION A1
		       INSERT INTO CUSTOMER VALUES(6,'CHERRY','JORDAN','JORDAN12@GMAIL.COM','BHILLS-24','HYD','TELANGANA',241215)
         END;
			 
--UPDATING TRANSACTION--
           BEGIN TRANSACTION
		     BEGIN
		        SAVE TRANSACTION A2
                UPDATE CUSTOMER SET FIRST_NAME='FRANCIS' WHERE FIRST_NAME='CHERRY' 	
			 END;	
			 
--TO ROLLBACK THE TRANSACTION--
             ROLLBACK TRANSACTION A2;

--FOR TABLE VIEW--
		     SELECT * FROM CUSTOMER;

--AGAIN UPDATING THE TRANSACTION--
             BEGIN TRANSACTION
			   BEGIN
			      SAVE TRANSACTION A3
				  UPDATE CUSTOMER SET FIRST_NAME = 'ALEX' WHERE LAST_NAME = 'JORDAN'
             END;			   
 
     SELECT * FROM CUSTOMER;
---------------------------------------------------------< >---------------------------------------------------------------------
                                                 

												   --THANK:)YOU--      